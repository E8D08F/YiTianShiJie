@use "sass:math"
@import 'typography'
@tailwind base
@tailwind components
@tailwind utilities

$fs: 21px
$lcct: 32
$mplr: 1.667

$lgth: $lcct * 1rem
$lmch: $mplr * 1rem
$lacs: (2 * $mplr - 1) * 1rem
$lsid: ($mplr - 1) * .5rem

:root
  --line-length: #{$lgth}

  --foreground-colour: #21272e
  --background-colour: #fdfdfc
  --a-colour: #CB2E5A
  --selection-colour: #CB2E5A32

@media screen and (prefers-color-scheme: dark)
  :root
    --foreground-colour: #fffffee3
    --background-colour: #181a1b
    --a-colour: #e16b8c
    --selection-colour: #e16b8c32

html,
body 
  writing-mode: vertical-rl 
  font-size: $fs 

body 
  font-family: 'Source Han Serif TC', source-han-serif-tc, serif 
  font-weight: 400 
  font-style: normal 
  color: var(--foreground-colour) 
  background-color: var(--background-colour) 

  overscroll-behavior: none 

.side-mask 
  position: fixed 
  top: 0 
  bottom: 0 
  width: 100vw 

  overflow-x: auto 

@supports (overscroll-behavior: contain)
  .side-mask 
    overscroll-behavior: contain 
    mask: linear-gradient(to right, rgba(0,0,0,0.12), black 0.27rem) left, linear-gradient(to left, rgba(0,0,0,0.12), black 0.27rem) right 
    mask-repeat: no-repeat 
    mask-composite: intersect 
    -webkit-mask-composite: source-in 
  

article 
  margin: $lacs $lacs - $lsid
  height: var(--line-length) 

  font-size: 1rem 
  line-height: $mplr
  text-align: justify 

  // For notches
  padding-right: calc(env(safe-area-inset-right) - $lmch) 
  padding-left: calc(env(safe-area-inset-left) - $lmch) 

.latin 
  font-family: 'Crimson Pro', serif 
  // Can be ignored
  font-weight: 345 

  position: relative 
  left: 0.088rem 

.cjk-punc, .tcy, .tcy-single 
  font-family: 'Hiragino Mincho ProN', source-han-serif-tc, 'Source Han Serif TC', serif 

#heading 
  margin-left: 2 * $lmch

h1, h1 .cjk-punc, h1 .tcy, h1 .tcy-single 
  font-family: source-han-sans-cjk-tc, 'Source Han Sans TC', sans-serif 
  font-weight: 700 

h1 
  .latin 
    font-family: 'Signika Negative', sans-serif 
    font-weight: 669 
    left: 0.036rem 

p 
  &:not(:first-of-type):not(.original-post) 
    text-indent: 1rem 

blockquote 
  font-family: 'AR Zhongkai GB18030 Medium', Kai, cursive

  p 
    &:first-of-type 
      text-indent: 1rem 

img 
  height: var(--line-length) 
  max-width: calc(100vw - 2rem) 
  object-fit: contain 
  object-position: center top 

figure 
  margin: 0 $lmch 0 

figcaption 
  opacity: 0.87 

a 
  color: var(--a-colour) 

// CJK Emphasis
em 
  font-style: normal 
  text-emphasis: '\25AA' 
  -webkit-text-emphasis: '\25AA' 
  // Would it be nice if offset can be customised

em.latin, em .latin 
  font-style: italic 
  text-emphasis: none 
  -webkit-text-emphasis: none 

ul 
  list-style-type: disc 

  li 
    &::marker 
      color: var(--a-colour) 

ol 
  list-style-type: trad-chinese-informal 
  list-style-position: inside 
  li 
    margin: 0 
    text-indent: 1rem 
    text-align: justify 

rt 
  font-size: 0.45rem 

  ruby-align: center 
  text-align: center 
  letter-spacing: 0 

  font-feature-settings: "vpal" 

  -webkit-font-smoothing: initial 
  -moz-osx-font-smoothing: initial 
  text-rendering: initial 

  &.bopomofo 
    font-family: BopomofoRuby 
    text-orientation: upright 

  &.pinyin 
    font-size: 0.6rem 
    font-family: 'Crimson Pro', serif 

    position: relative 
    left: 0.1rem 

hr 
  border: none 
  margin: 0 

  &::before 
    content: "‚ùß" 
    display: block 
    text-align: center 
    margin: 0 $lmch 

    height: var(--line-length) 
    position: relative 
    left: 0.273rem 

.indent 
  text-indent: 1rem

.no-indent 
  text-indent: 0 

.original-post 
  margin-right: $lmch 

::-moz-selection 
  background: var(--selection-colour) 

::selection 
  background: var(--selection-colour) 

// Override Tategaki default
.tategaki 
  hanging-punctuation: none 

// Fix space height
.squeeze-out-space::before, .squeeze-in-space::before 
  content: "\0020" 
  font: 0.833em Courier // Alternative font. Its U+0020 must be wider than that in CJK font.


// Style text frame
@mixin text_frame($_lcct, $should_set_fs: false)
  @if $should_set_fs
    html, body
      font-size: $fs
  :root
    --line-length: #{$_lcct * 1rem}

@function corresponding_screen_height($text_frame_height)
  // Should return `px`
  @return $text_frame_height + (2 * $mplr - 1) * 2 * $fs

// Create `max-height` breakpoints
$_last_breakpoint: null
@mixin screen_breakpoints($start_lcct, $decrease, $fs)
  $fs: $fs !global
  @for $i from 0 through $decrease
    @if $i == 0
      @if $_last_breakpoint != null
        @media screen and (max-height: corresponding_screen_height($_last_breakpoint))
          @include text_frame($start_lcct - $i, true)
    @else
      @media screen and (max-height: corresponding_screen_height(($start_lcct - $i + 1) * $fs))
        @include text_frame($start_lcct - $i)
      @if $i == $decrease
        $_last_breakpoint: ($start_lcct - $i) * $fs !global

@mixin lgth_step_down($ideal_lcct, $min_lcct, $sizes...)
  $sizes: append($sizes, 0px)
  @for $i from 1 to length($sizes)
    $greedy_step: math.floor(math.div((nth($sizes, $i) - nth($sizes, $i + 1)) * $ideal_lcct, nth($sizes, $i)))
    $step: min($greedy_step, $ideal_lcct - $min_lcct)
    @include screen_breakpoints($ideal_lcct, $step, nth($sizes, $i))


@include lgth_step_down($lcct, 18, $fs, 18px, 16px)
